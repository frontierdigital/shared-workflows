---
name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  preflight:
    runs-on: ubuntu-latest
    outputs:
      version_increment_type: ${{ steps.get_version_increment_type.outputs.version_increment_type }}
    steps:
      - uses: actions/checkout@v3
      - id: get_version_increment_type
        name: Get version increment type
        run: |
          set -euo pipefail

          if [[ "${{ github.event.head_commit.message }}" =~ (major|minor|patch)([^,]*) ]]; then
            version_increment_type="${BASH_REMATCH[1]}"
          else
            version_increment_type="patch"
          fi
          echo "Version increment type: ${version_increment_type}"
          echo "version_increment_type=$version_increment_type" >> "$GITHUB_OUTPUT"
  build:
    needs: preflight
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure git
        run: |
          git config --global url."https://x-oauth-basic:${{ secrets.GITHUB_TOKEN }}@github.com/frontierdigital".insteadOf https://github.com/frontierdigital
      - id: increment_version
        uses: reecetech/version-increment@2023.4.1
        with:
          scheme: semver
          increment: ${{ needs.preflight.outputs.version_increment_type }}
      - name: Add version tag
        run: |
          set -euo pipefail

          git config --global user.email "bot@frontierdigital.net"
          git config --global user.name "Frontier Digital Bot"

          git tag -a "${{ steps.increment_version.outputs.v-version }}" -m "${{ steps.increment_version.outputs.v-version }}"
          git push origin "${{ steps.increment_version.outputs.v-version }}"
      - id: get_python_version
        name: Get Python version
        run: |
          set -euo pipefail

          python_version=$(cat ${GITHUB_WORKSPACE}/.python-version)
          echo "Python version: ${python_version}"
          echo "python_version=$python_version" >> "$GITHUB_OUTPUT"
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.get_python_version.outputs.python_version }}
      - name: Setup pipenv
        run: python -m pip install --upgrade pipenv wheel
      - id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}-dev
      - name: Install
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: make install
        env:
          INCLUDE_DEV: true
      - name: Build
        run: make build
      - name: Test
        run: make test
