---
on:
  workflow_call:
    inputs:
      workloadName:
        type: string
        required: true
    secrets:
      armClientId:
        required: true
      armClientSecret:
        required: true
      armSubscriptionId:
        required: true
      armTenantId:
        required: true
jobs:
  preflight:
    runs-on: ubuntu-latest
    outputs:
      python_version: ${{ steps.get_python_version.outputs.python_version }}
      terraform_version: ${{ steps.get_terraform_version.outputs.terraform_version }}
      version_increment_type: ${{ steps.get_version_increment_type.outputs.version_increment_type }}
    steps:
      - uses: actions/checkout@v3
      - id: get_version_increment_type
        name: Get version increment type
        run: |
          set -euo pipefail

          if [[ "${{ github.event.head_commit.message }}" =~ (major|minor|patch)([^,]*) ]]; then
            version_increment_type="${BASH_REMATCH[1]}"
          else
            version_increment_type="none"
          fi
          echo "Version increment type: ${version_increment_type}"
          echo "version_increment_type=$version_increment_type" >> "$GITHUB_OUTPUT"
      - id: get_python_version
        name: Get Python version
        run: |
          set -euo pipefail

          python_version=$(cat ${GITHUB_WORKSPACE}/.python-version)
          echo "Python version: ${python_version}"
          echo "python_version=$python_version" >> "$GITHUB_OUTPUT"
      - id: get_terraform_version
        name: Get Terraform version
        run: |
          set -euo pipefail

          terraform_version=$(cat ${GITHUB_WORKSPACE}/.tfswitchrc)
          echo "Terraform version: ${terraform_version}"
          echo "terraform_version=$terraform_version" >> "$GITHUB_OUTPUT"
  build:
    needs: preflight
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.increment_version.outputs.v-version }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure git
        run: |
          git config --global url."https://x-oauth-basic:${{ secrets.GITHUB_TOKEN }}@github.com/frontierdigital".insteadOf https://github.com/frontierdigital
      - id: increment_version
        if: needs.preflight.outputs.version_increment_type != 'none'
        uses: reecetech/version-increment@2023.4.1
        with:
          scheme: semver
          increment: ${{ needs.preflight.outputs.version_increment_type }}
      - name: Add version tag
        if: steps.increment_version.outcome == 'success'
        run: |
          set -euo pipefail

          git config --global user.email "bot@frontierdigital.net"
          git config --global user.name "Frontier Digital Bot"

          git tag -a "${{ steps.increment_version.outputs.v-version }}" -m "${{ steps.increment_version.outputs.v-version }}"
          git push origin "${{ steps.increment_version.outputs.v-version }}"
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.preflight.outputs.python_version }}
      - name: Setup pipenv
        run: python -m pip install --upgrade pipenv wheel
      - id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}-dev
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ needs.preflight.outputs.terraform_version }}
      - name: Install
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: make install
        env:
          INCLUDE_DEV: true
      - name: Build
        run: make build
      - name: Test
        run: make test
  deploy:
    needs:
      - preflight
      - build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3
      - name: Fetch config
        run: |
          set -euo pipefail

          CONFIG_DIR_PATH="${{ github.workspace }}/config/dev"
          if [[ -d "$CONFIG_DIR_PATH" ]]; then
            echo "Fetching config from $CONFIG_DIR_PATH."
            cp -R "$CONFIG_DIR_PATH" "${{ github.workspace }}/.config"
          else
            echo "No config found."
          fi
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.preflight.outputs.python_version }}
      - name: Setup pipenv
        run: python -m pip install --upgrade pipenv wheel
      - id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ needs.preflight.outputs.terraform_version }}
      - name: Install
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: make install
      - name: Deploy
        run: make deploy
        env:
          ARM_CLIENT_ID: ${{ secrets.armClientId }}
          ARM_CLIENT_SECRET: ${{ secrets.armClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.armSubscriptionId }}
          ARM_TENANT_ID: ${{ secrets.armTenantId }}
          ENVIRONMENT: dev
          HELM_CACHE_HOME: "${{ github.workspace }}/.helm/cache"
          HELM_CONFIG_HOME: "${{ github.workspace }}/.helm/config"
          HELM_DATA_HOME: "${{ github.workspace }}/.helm/data"
          REGION: uksouth
          SET: standalone
          WORKLOAD_NAME: ${{ inputs.workloadName }}
          WORKLOAD_TYPE: ${{ github.event.repository.name }}
          WORKLOAD_VERSION: ${{ needs.build.outputs.version }}
          ZONE: demo
